#include <iostream>
#include <vector>
#include <cmath>

using namespace std;

// Function to calculate the inverse of a matrix
vector<vector<double>> inverse(vector<vector<double>> A) {
    int n = A.size();
    vector<vector<double>> B(n, vector<double>(n, 0));
    vector<vector<double>> temp(n, vector<double>(2 * n, 0));

    // Create augmented matrix
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            temp[i][j] = A[i][j];
        }
        temp[i][i + n] = 1;
    }

    // Apply Gauss-Jordan elimination
    for (int i = 0; i < n; i++) {
        if (temp[i][i] == 0) {
            cout << "Matrix is singular" << endl;
            exit(0);
        }
        for (int j = 0; j < n; j++) {
            if (i != j) {
                double ratio = temp[j][i] / temp[i][i];
                for (int k = 0; k < 2 * n; k++) {
                    temp[j][k] -= ratio * temp[i][k];
                }
            }
        }
    }

    // Convert the right half of the augmented matrix into the inverse
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            B[i][j] = temp[i][j + n] / temp[i][i];
        }
    }

    return B;
}

int main() {
    // Example system of linear equations:
    // 2x + y = 5
    // 4x - 3y = 2
    vector<vector<double>> A{ {2, 5, 6}, {10, 4, 4}, {5, 3, 2} };
    vector<double> b{ 10, 25, 45 };

    // Solve Ax = b using matrix inversion
    vector<vector<double>> A_inv = inverse(A);
    vector<double> x(A.size());
    for (int i = 0; i < A.size(); i++) {
        double sum = 0;
        for (int j = 0; j < A.size(); j++) {
            sum += A_inv[i][j] * b[j];
        }
        x[i] = round(sum * 100) / 100;
    }
   
    for (int i = 0; i < x.size(); i++) {
        cout << "x = "; cout << x[i] << " "; cout << endl;
    }
    cout << endl;

    return 0;
}
